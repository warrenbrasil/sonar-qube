name: "Warren - Run Tests and SonarQube Analysis"
description: "Run .NET Tests and sends the result to SonarQube"
branding:
  icon: "activity"
  color: "red"
inputs:
  sonar-token:
    description: "SonarQube token"
    required: true
  sonar-host-url:
    description: "SonarQube URL"
    required: true
  sonar-project-key:
    description: "SonarQube project key"
    required: true
  sonar-organization:
    description: "SonarQube organization name"
    required: true
  solution:
    description: "Solution file name without the .sln extension (do not use with project input parameter)"
    required: false
    default: ""
  project:
    description: "The path of test project to be tested (do not use with solution input parameter)"
    required: false
    default: ""
  tests-dir:
    description: "The directory name which contains all the tests projects (default is tests)"
    required: false
    default: "tests"
  code-exclusions:
    description: "The matching path for code that should be excluded from coverage (absolute, relative and pattern paths are acceptable)"
    required: false
    default: ""
  pull-request:
    description: "Boolean to change behavior of dotnet-sonarscanner for pull requests"
    required: true
  branch-name:
    description: "Branch name to be displayed on SonarQube (required when pull-request is false)"
    required: false
  pull-request-number:
    description: "The number of the pull request (required when pull-request is true)"
    required: false
  pull-request-base:
    description: "The target branch name from the pull request (required when pull-request is true)"
    required: false
  pull-request-head:
    description: "The target source name from the pull request (required when pull-request is true)"
    required: false
  quality-gate-wait:
    description: "Poll to SonarQube instance until the Quality Gate status is available"
    required: false
    default: true
  verbosity:
    description: "Verbosity level for dotnet test command"
    required: false
    default: m
runs:
  using: composite
  steps:
    - name: Install SonarQube Scanner
      shell: bash
      run: dotnet tool install --global dotnet-sonarscanner

    - name: Begin SonarQube Scan for Pull Request
      if: ${{ inputs.pull-request == 'true' && inputs.code-exclusions != '' }}
      shell: bash
      env:
        SONAR_TOKEN: ${{ inputs.sonar-token }}
        SONAR_HOST_URL: ${{ inputs.sonar-host-url }}
        SONAR_PROJECT_KEY: ${{ inputs.sonar-project-key }}
        SONAR_ORGANIZATION: ${{ inputs.sonar-organization }}
        CODE_EXCLUSIONS: ${{ inputs.code-exclusions }}
        PR_NUMBER: ${{ inputs.pull-request-number }}
        PR_BASE: ${{ inputs.pull-request-base }}
        PR_HEAD: ${{ inputs.pull-request-head }}
        TESTS_DIR: ${{ inputs.tests-dir }}
        QUALITY_GATE_WAIT: ${{inputs.quality-gate-wait }}
      run: |
        dotnet-sonarscanner begin \
        /k:"$SONAR_PROJECT_KEY" \
        /o:"$SONAR_ORGANIZATION" \
        /d:sonar.pullrequest.key="$PR_NUMBER" \
        /d:sonar.pullrequest.branch="$PR_HEAD" \
        /d:sonar.pullrequest.base="$PR_BASE" \
        /d:sonar.login="$SONAR_TOKEN" \
        /d:sonar.host.url="$SONAR_HOST_URL" \
        /d:sonar.qualitygate.wait=$QUALITY_GATE_WAIT \
        /d:sonar.coverage.exclusions="$CODE_EXCLUSIONS" \
        /d:sonar.cs.opencover.reportsPaths="./$TESTS_DIR/**/results/*.opencover.xml"

    - name: Begin SonarQube Scan for Pull Request
      if: ${{ inputs.pull-request == 'true' && inputs.code-exclusions == '' }}
      shell: bash
      env:
        SONAR_TOKEN: ${{ inputs.sonar-token }}
        SONAR_HOST_URL: ${{ inputs.sonar-host-url }}
        SONAR_PROJECT_KEY: ${{ inputs.sonar-project-key }}
        SONAR_ORGANIZATION: ${{ inputs.sonar-organization }}
        PR_NUMBER: ${{ inputs.pull-request-number }}
        PR_BASE: ${{ inputs.pull-request-base }}
        PR_HEAD: ${{ inputs.pull-request-head }}
        TESTS_DIR: ${{ inputs.tests-dir }}
        QUALITY_GATE_WAIT: ${{inputs.quality-gate-wait }}
      run: |
        dotnet-sonarscanner begin \
        /k:"$SONAR_PROJECT_KEY" \
        /o:"$SONAR_ORGANIZATION" \
        /d:sonar.pullrequest.key="$PR_NUMBER" \
        /d:sonar.pullrequest.branch="$PR_HEAD" \
        /d:sonar.pullrequest.base="$PR_BASE" \
        /d:sonar.login="$SONAR_TOKEN" \
        /d:sonar.host.url="$SONAR_HOST_URL" \
        /d:sonar.qualitygate.wait=$QUALITY_GATE_WAIT \
        /d:sonar.cs.opencover.reportsPaths="./$TESTS_DIR/**/results/*.opencover.xml"

    - name: Begin SonarQube Scan
      if: ${{ inputs.pull-request == 'false' && inputs.code-exclusions != '' }}
      shell: bash
      env:
        SONAR_TOKEN: ${{ inputs.sonar-token }}
        SONAR_HOST_URL: ${{ inputs.sonar-host-url }}
        SONAR_PROJECT_KEY: ${{ inputs.sonar-project-key }}
        SONAR_ORGANIZATION: ${{ inputs.sonar-organization }}
        CODE_EXCLUSIONS: ${{ inputs.code-exclusions }}
        BRANCH_NAME: ${{ inputs.branch-name }}
        TESTS_DIR: ${{ inputs.tests-dir }}
      run: |
        dotnet-sonarscanner begin \
        /k:"$SONAR_PROJECT_KEY" \
        /o:"$SONAR_ORGANIZATION" \
        /d:sonar.branch.name="$BRANCH_NAME" \
        /d:sonar.login="$SONAR_TOKEN" \
        /d:sonar.host.url="$SONAR_HOST_URL" \
        /d:sonar.coverage.exclusions="$CODE_EXCLUSIONS" \
        /d:sonar.cs.opencover.reportsPaths="./$TESTS_DIR/**/results/*.opencover.xml"

    - name: Begin SonarQube Scan
      if: ${{ inputs.pull-request == 'false' && inputs.code-exclusions == '' }}
      shell: bash
      env:
        SONAR_TOKEN: ${{ inputs.sonar-token }}
        SONAR_HOST_URL: ${{ inputs.sonar-host-url }}
        SONAR_PROJECT_KEY: ${{ inputs.sonar-project-key }}
        SONAR_ORGANIZATION: ${{ inputs.sonar-organization }}
        BRANCH_NAME: ${{ inputs.branch-name }}
        TESTS_DIR: ${{ inputs.tests-dir }}
      run: |
        dotnet-sonarscanner begin \
        /k:"$SONAR_PROJECT_KEY" \
        /o:"$SONAR_ORGANIZATION" \
        /d:sonar.branch.name="$BRANCH_NAME" \
        /d:sonar.login="$SONAR_TOKEN" \
        /d:sonar.host.url="$SONAR_HOST_URL" \
        /d:sonar.cs.opencover.reportsPaths="./$TESTS_DIR/**/results/*.opencover.xml"

    - name: Restore
      shell: bash
      run: |
        dotnet restore

    - name: Build
      shell: bash
      run: |
        dotnet build --no-restore

    - name: Run tests
      if: ${{ inputs.solution != '' && inputs.project == '' }}
      shell: bash
      env:
        SOLUTION: ${{ inputs.solution }}
        VERBOSITY: ${{ inputs.verbosity }}
      run: |
        dotnet test $SOLUTION.sln \
        /p:CollectCoverage=true \
        /p:ExcludeByAttribute="CompilerGeneratedAttribute" \
        /p:MergeWith=./results/*.opencover.xml \
        /p:CoverletOutput=./results/ \
        /p:CoverletOutputFormat=opencover \
        --no-build --no-restore \
        --logger "GitHubActions;report-warnings=false" \
        --verbosity $VERBOSITY

    - name: Run tests
      if: ${{ inputs.solution == '' && inputs.project != '' }}
      shell: bash
      env:
        PROJECT: ${{ inputs.project }}
        VERBOSITY: ${{ inputs.verbosity }}
      run: |
        dotnet test $PROJECT \
        /p:CollectCoverage=true \
        /p:ExcludeByAttribute="CompilerGeneratedAttribute" \
        /p:MergeWith=./results/*.opencover.xml \
        /p:CoverletOutput=./results/ \
        /p:CoverletOutputFormat=opencover \
        --no-build --no-restore \
        --logger "GitHubActions;report-warnings=false" \
        --verbosity $VERBOSITY

    - name: End Sonar Scan
      shell: bash
      env:
        SONAR_TOKEN: ${{ inputs.sonar-token }}
      run: dotnet-sonarscanner end /d:sonar.login="$SONAR_TOKEN"
